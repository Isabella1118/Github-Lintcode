Description
Design an iterator over a binary search tree with the following rules:

Elements are visited in ascending order (i.e. an in-order traversal)
next() and hasNext() queries run in O(1) time in average.
 
Example
For the following binary search tree, in-order traversal by using iterator is [1, 6, 10, 11, 12]

   10
 /    \
1      11
 \       \
  6       12
  
Thinking: 要找到二叉搜索树中的最小节点，应该从根节点递归遍历左节点，直到遍历的节点没有左节点，那么该节点就是二叉树中的最小节点。
现在已经有二叉搜索树中没有访问过的最小节点了，那么当访问了该节点后，剩余没有访问的树中最小的节点在哪里呢？如果该节点有右子树，
那么在它的右子树中（又回到了找一棵二叉搜索树的最小元素，不过这棵二叉搜索树变小了）；如果没有右子树，那么就是它的父节点。为了能够快速定位到父节点，
我们可以用栈将遍历路径暂存起来，当进行next()操作时，我们弹出栈顶元素并进行访问，如果它有右子树的话就遍历它的右子树；如果没有右子树，
当下次出栈操作时就是访问当前节点的父节点了。

Solution:

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None

Example of iterate a tree:
iterator = BSTIterator(root)
while iterator.hasNext():
    node = iterator.next()
    do something for node 
"""


class BSTIterator:
    
    #@param: root: The root of binary tree.
    def __init__(self, root):
        self.stack = []
        self.curt = root

    
    #@return: True if there has next node, or false
    
    def hasNext(self):
        return self.curt is not None or len(self.stack) > 0

    
    #@return: return next node
    
    def next(self):
        while self.curt is not None:
            self.stack.append(self.curt)
            self.curt = self.curt.left
        
        self.curt = self.stack.pop()
        nxt = self.curt
        self.curt = self.curt.right
        return nxt
