Description
Given a binary tree, find the subtree with minimum sum. Return the root of the subtree.

LintCode will print the subtree which root is your return node.
It's guaranteed that there is only one subtree with minimum sum and the given binary tree is not an empty tree.
 
Example
Given a binary tree:

     1
   /   \
 -5     2
 / \   /  \
0   2 -4  -5 
return the node 1.

Thinking: In Python 2, the maximum value for plain int values is available as sys.maxint.

Solution:

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root of binary tree
    @return: the root of the minimum subtree
    """
    import sys
    minimum_sum = sys.maxint
    result = None
    
    def findSubtree(self, root):
        self.helper(root)
        return self.result
    
    def helper(self, root):
        if root is None:
            return 0
        
        left_weight = self.helper(root.left)
        right_weight = self.helper(root.right)
        
        if left_weight + right_weight + root.val <= self.minimum_sum:
            self.minimum_sum = left_weight + right_weight + root.val
            self.result = root
        
        return left_weight + right_weight + root.val
