Description
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

You may assume k is always valid, 1 ≤ k ≤ BST's total elements.
 
Example
Given root = {1,#,2}, k = 2, return 2.

Challenge
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

Solution:

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the given BST
    @param k: the given k
    @return: the kth smallest element in BST
    """
    def kthSmallest(self, root, k):
        
        self.treeList = []
        self.inOrder(root)
        
        if k <= 0:
            return None
            
        return self.treeList[k-1]
        
    def inOrder(self, root):
        if root is None:
            return None
        
        if root.left is None and root.right is None:
            self.treeList.append(root.val)
            return
        
        self.inOrder(root.left)
        self.treeList.append(root.val)
        self.inOrder(root.right)
