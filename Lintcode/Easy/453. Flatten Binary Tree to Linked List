Description

Flatten a binary tree to a fake "linked list" in pre-order traversal.

Here we use the right pointer in TreeNode as the next pointer in ListNode.

Don't forget to mark the left child of each node to null. Or you will get Time Limit Exceeded or Memory Limit Exceeded.

Example
              1
               \
     1          2
    / \          \
   2   5    =>    3
  / \   \          \
 3   4   6          4
                     \
                      5
                       \
                        6

Thinking: 先序遍历, 用了一个全局变量nodes来记录先序遍历的所有节点, 
在遍历完成后重新定义这个树, 让树的左节点全为None而右节点按照先序遍历的方式连接

Solution:

def flatten(self, root):
        if not root:
            return 
        self.nodes =[]
        self.traversal(root) 
        for i in range(0,len(self.nodes) - 1):
            self.nodes[i].left = None 
            self.nodes[i].right = self.nodes[i+1]
        self.nodes[-1].left = None 
        self.nodes[-1].right = None 
        
def traversal(self,node):
    if node is None:
            return  
    self.nodes.append(node)
    self.traversal(node.left)
    self.traversal(node.right)
              
