Description
Given a list of numbers, return all possible permutations.

You can assume that there is no duplicate numbers in the list.
  
Example
For nums = [1,2,3], the permutations are:

[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

Thinking: 采用递归把数组中的数字依次加入当前数组current来进行排列组合.
current, num[:i] + num[i+1:], result
1                23            []
2                3             [1]
3                -             [1,2]
-                -             [1,2,3]and[1,3,2]

2                13            []
1                3             [2]
3                -             [2,1]
-                -             [2,1,3]and[2,3,1]

3               12             []
1               2              [3]
2               -              [3,1]
-               -              [3,1,2]and[3,2,1]

Solution:

class Solution:
    """
    @param: nums: A list of integers.
    @return: A list of permutations.
    """
    def permute(self, nums):
        result = []
        self.get_permute([], nums, result)
        return result
        
    def get_permute(self, current, num, result):
        if not num:
            result.append(current + [])
        for i,v in enumerate(num):
            current.append(num[i])
            self.get_permute(current, num[:i] + num[i+1:], result)
            current.pop()
