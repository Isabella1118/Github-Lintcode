Description
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example
Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

Thinking:
1. 是否N个点，N-1条边
2. 判断连通性（N个点连通）

Solution:

class Solution:
    """
    @param n: An integer
    @param edges: a list of undirected edges
    @return: true if it's a valid tree, or false
    """
    def validTree(self, n, edges):
        if len(edges) != n-1:
            return False
        
        neighbors = collections.defaultdict(list)   #collections为模块，defaultdict（）为带默认值的字典
        for k,v in edges:
            neighbors[k].append(v)    #互相添加邻居
            neighbors[v].append(k)
        
        visited = []
        queue = [0]
        while queue:
            cur = queue.pop()
            visited.append(cur)
            queue += [node for node in neighbors[cur] if node not in visited]
            
        return len(visited) == n
