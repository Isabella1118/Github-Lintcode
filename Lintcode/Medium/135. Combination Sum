Description

Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.

Example
Given candidate set [2,3,6,7] and target 7, a solution set is:

[7]
[2, 2, 3]

Thinking:采用回溯法，由于组合中的数字要按序排列，我们先将集合中的数排序，依次把数字放入组合中，由于所有数都是正数。如果当前和已经超出target，则
放弃（直接return）；如果和为目标值，则加入结果集；如果和小于目标值，则继续增加元素。由于结果集中不能出现重复的组合，所以增加元素时只增加当前元素
及之后的元素。

Solution:

class Solution:
    """
    @param candidates: A list of integers
    @param target: An integer
    @return: A list of lists of integers
    """
    def combinationSum(self, candidates, target):
        if not candidates:
            return []
        candidates.sort()
        result = []
        self.combination(candidates, target, [], result)
        return result
        
    def combination(self, candidates, target, current, result):
        s = sum(current) if current else 0
        if s > target:
            return
        elif s == target:
            result.append(current)
        else:
            for i,v in enumerate(candidates):
                self.combination(candidates[i:], target, current+[v], result)
