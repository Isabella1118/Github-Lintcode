Description

Given a set of distinct integers, return all possible subsets.

Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.

Example
If S = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

Thinking:
注意点：
1.子集要包括空集合和该集合自己
2.每个子集中的元素要按照不降序的顺序排列
3.结果没有顺序要求

可以用递归来解决。递归是倒过来解决问题，要求n的情况，就先要求n-1。在这里尝试顺序地解决，通过不断迭代的方法来求所有子集。eg：集合[1]有[[],[1]]
两个子集，当向其中添加一个元素2时，[1,2]有[[],[1],[2],[1,2]]四个子集，在新添加一个元素时，是在原来子集的基础上，添加原来子集中所有元素的加上新元素的总
集合。因为要求每个子集中的元素都是不降序，要先把所有元素排序。


Solution:

class Solution:
    """
    @param nums: A set of numbers
    @return: A list of lists
    """
    def subsets(self, nums):
        result = [[]]
        for num in sorted(nums):
            result += [item + [num] for item in result]    # python将多个list合并为一个list可以用“+”号
        return result
        
        
 # Solution().subsets([1,2,3]) == [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]
