Description

Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example
Given s = "aab", return:

[
  ["aa","b"],
  ["a","a","b"]
]

Thinking: 用递归的方法，将一个字符串分为前后两个部分，如果第一部分是一个palindrome, 则对第二部分再次分割，不断递归，直到达到终止条件：字符串为空。
如果第一部分不是一个palindrome，则尝试下一种分割方法。

Solution:

class Solution:
    """
    @param: s: A string
    @return: A list of lists of string
    """
    def partition(self, s):
        if not s:
            return [[]]
        result = []
        for i in range(len(s)):
            if self.isPalindrome(s[:i+1]):
                for r in self.partition(s[i+1:]):
                    result.append([s[:i+1]]+r)
        return result
        
    def isPalindrome(self, s):
        return s == s[::-1]
