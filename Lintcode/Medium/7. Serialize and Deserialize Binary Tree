Description
Design an algorithm and write code to serialize and deserialize a binary tree. Writing the tree to a file is called 'serialization' and reading back from the file to reconstruct the exact same binary tree is 'deserialization'.

Example
An example of testdata: Binary tree {3,9,20,#,#,15,7}, denote the following structure:

  3
 / \
9  20
  /  \
 15   7

Thinking:

Solution:

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""


class Solution:
    """
    @param root: An object of TreeNode, denote the root of the binary tree.
    This method will be invoked first, you should design your own algorithm 
    to serialize a binary tree which denote by a root node to a string which
    can be easily deserialized by your own "deserialize" method later.
    """
    def serialize(self, root):
        if root is None:
           return "{}"
           
        queue = [root]    #创建队列，把起始节点都放进去
        index = 0
        
        while index < len(queue):     #如果队列不空，处理队列中的节点，并拓展出新的节点
            if queue[index] is not None:    
                queue.append(queue[index].left)    #拿到一个点要把它的左右节点都加进队列里去
                queue.append(queue[index].right)
            index += 1
        
        while queue[-1] is None:   #如果最后一位为空，删去
            queue.pop()
        
        return '{%s}' % ','.join([str(node.val) if node is not None else '#'
                                  for node in queue])

    """
    @param data: A string serialized by your serialize method.
    This method will be invoked second, the argument data is what exactly
    you serialized at method "serialize", that means the data is not given by
    system, it's given by your own serialize method. So the format of data is
    designed by yourself, and deserialize it here as you serialize it in 
    "serialize" method.
    """
    def deserialize(self, data):
        data = data.strip('\n')      #去除两端换行
        
        if data == '{}':
            return None
        
        vals = data[1:-1].split(',')
        
        root = TreeNode(int(vals[0]))    
        queue = [root]
        isLeftNode = True
        index = 0
        
        for val in vals[1:]:     #除了node之外的所有元素，1到最后一位
            if val is not '#':
                node = TreeNode(int(val))
                if isLeftNode:
                    queue[index].left = node
                else:
                    queue[index].right = node
                queue.append(node)
            
            if not isLeftNode:
                index += 1
            isLeftNode = not isLeftNode
        
        return root
