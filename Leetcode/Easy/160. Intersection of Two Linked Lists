Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.

Thinking: Move cur1 (cur2) forward from headA (headB) and loop back to headB (headA), 
eventually cur1 and cur2 will meet at the intersection point or nullptr.

Solution:

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        lenA=self.lengthLinkedList(headA)
        lenB=self.lengthLinkedList(headB)
        
        #共同点出现前的部分
        if lenA >= lenB:
            for i in range(lenA-lenB):
                headA=headA.next
        else:
            for i in range(lenB-lenA):
                headB=headB.next
        #共同点的部分
        while headA and headB:
            if headA==headB:
                return headA
            headA=headA.next
            headB=headB.next
        return 
            
    
    def lengthLinkedList(self, head):
        length=0
        while head:
            length+=1
            head=head.next
        return length
