Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.

Thinking: 用一个下标index来标记下一个不重复的数字存放的位置，另一个下标start来表示当前是和哪个数字来比较有没有重复。
遍历所有数字i，如果i不重复则放到index位置，后移index，并更新start位置为i；否则继续遍历。返回index即为不重复数组的长度。


class Solution:
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        
        index = 1     #用来比较的数（从第二个数和第一个数比较开始）
        start = 0     #从头开始被比较（从第一个数开始）
        
        for i in range(0, len(nums)):
            if nums[start] != nums[i]:    #没有重复
                nums[index] = nums[i]     #不重复则放到index位置
                index += 1                #后移index
                start = i                 #下一次比较从不重复的位置开始
        return index
