Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 
 Thinking: 平衡二叉搜索树的要求是每个节点左右子树的高度差最多为1。
 那只要取序列的中间数作为根节点，左边的序列再组成它的左子树，右边的序列组成它的右子树，递归完成构造。
 1. nums为空，return None.
 2. nums非空，nums[n/2]为中间元素，根结点，nums[:mid]为左子树， nums[mid+1:]为右子树.
 
 Solution:
 
 # Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        if not nums:
            return None
        if nums:
            mid = len(nums)/2
            root = TreeNode(nums[mid])
            root.right = self.sortedArrayToBST(nums[mid+1:])
            root.left = self.sortedArrayToBST(nums[:mid])
            return root
 
 
