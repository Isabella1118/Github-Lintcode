Implement int sqrt(int x).

Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Example 1:

Input: 4
Output: 2
Example 2:

Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.
             
Thinking: Binary Search

Solution:

class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        if x < 0:
            return None
            
        start = 0
        end = x
        
        while start + 1 < end:
            mid = (start + end) // 2
            if mid * mid <= x:
                start = mid
            else:
                end = mid
        
        if end * end <= x:
            return end
        
        return start
        
Better Solution:

Thinking： 根据根的大小进行二分

Solution：

if x==0: return 0
        #左0右x
        left=0
        right=x
        while left+1<right:
            mid=left+(right-left)/2
            if mid**2==x: return mid
            elif mid**2>x:
                right=mid
            else: left=mid
        if left**2<=x and (left+1)**2>x: return left
        if right**2<=x and (right+1)**2>x: return right
        
