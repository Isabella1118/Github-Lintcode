Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

Thinking: 
Boyer-Moore众数(majority number) 问题, 在数组中找到两个不相同的元素并删除它们，不断重复此过程，直到数组中元素都相同，
那么剩下的元素就是主要元素, 这个算法的妙处在于不直接删除数组中的元素，而是利用一个计数变量.

可以通过哈希表记录每个数值出现的次数并找出出现次数最多的数值。不过有一个比较巧妙的思路是，就是不断将数组中两两不同的数同时去除，
极端情况是每个其他数值都与一个数量最多的数同时去除，即使这样，最后剩下的数值也是那个数量超过总数一半的数值。具体实现来看，我们可以把需要抵消的数值存起来，
并记录它的数量，这个数量表示它还能抵消掉几个不同的数值。遇到与它不同的数值就减一，遇到相同的就加一。如果数量变为0，那说明这个数暂时已经完全去除了。
我们可以用下一个数值继续与其它的数值相抵消。遍历完整个数组后，还没抵消掉的数值就是要求的结果。

Solution:

class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        result = None
        count = 0
        for num in nums:
            if count == 0:
                result = num
            if result == num:
                count += 1
            else:
                count -= 1
        return result
