Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.

Thinking: 可以通过树的广度优先遍历 Binary Tree Level Order Traversal 来实现，
在广度优先遍历的过程中，每遍历一层就高度加一，如果某一个节点是叶子节点，那么当前的高度就是最小高度。

Solution:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        current_level = [root]
        depth = 0
        while current_level:
            depth += 1
            next_level = []
            for n in current_level:
                left = n.left
                right = n.right
                if left is None and right is None:
                    return depth
                if left:
                    next_level.append(n.left)
                if right:
                    next_level.append(n.right)
            current_level = next_level
        return depth

