The count-and-say sequence is the sequence of integers with the first five terms as following:

1.     1
2.     11
3.     21
4.     1211
5.     111221
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
Given an integer n, generate the nth term of the count-and-say sequence.

Note: Each term of the sequence of integers will be represented as a string.

Example 1:

Input: 1
Output: "1"
Example 2:

Input: 4
Output: "1211"

Thinking: n=1 返回1; n=2由于n=1的结果为1，有1个1，所以返回11; n=3由于n=2结果为11，有2个1，返回21; n=4由于n=3结果为21，有1个2和1个1，所以返回1211;
给定n,以此类推。用一个下标来表示当前统计的字符的起始位置，一个计数器来表示该字符的数目。不断读取直到字符不相等，添加到结果集中，更新起始位置和计数器。
下面代码中的计数器用下标相减代替。
这里用到了lists的一个方法extend，它接受一个参数，这个参数总是一个list，并且把这个list里的每个元素添加到原list中。
lists的另一个用法是append，它接受一个参数，这个参数可以是任何数据类型，并且简单地追加到list的尾部（加入参数整体而不是单个元素）。

class Solution:
    def countAndSay(self, n):
        """
        :type n: int
        :rtype: str
        """
        result = "1"
        for _ in range(1,n):
            result = self.getNext(result)
        return result
    
    def getNext(self, s):
        result = []
        start = 0
        while start < len(s):
            curr = start + 1
            while curr < len(s) and s[start] == s[curr]:
                curr += 1
            result.extend((str(curr-start), s[start]))
            start = curr
        return "".join(result)
        
