Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Thinking: 可以进行多次交易的话，为了获取最多的利润，应该在每一段价格上升的区间的开头买入，末尾卖出。
从前往后遍历数组，如果价格下跌，则在前一天卖出，在下跌的那天再次买入。不要忘记最后的上升段之后没有下跌的情况，要额外加上。

Solution:

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if not prices:
            return 0
        low = high = prices[0]
        profit = 0
        for i in range(1, len(prices)):   #后面要用i-1所以从1开始
            if prices[i-1] <= prices[i]:   #前一天比后一天价格低或相等 继续遍历
                high = prices[i]
            else:
                profit += high - low   #前一天比后一天价格高 前一天卖出 加上profit
                low = high = prices[i]  #update新购买和卖出价
        profit += high - low       #最后的上升段没有下跌的情况
        return profit
