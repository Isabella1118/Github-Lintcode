Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example 1:

Given nums = [3,2,2,3], val = 3,

Your function should return length = 2, with the first two elements of nums being 2.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,1,2,2,3,0,4,2], val = 2,

Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.

Note that the order of those five elements can be arbitrary.

It doesn't matter what values are set beyond the returned length.

Thinking:用两个指针，一个指针顺序扫描所有元素判断当前元素是否是要删除的，另一个指针一直指向下一个不是要删除元素的位置。
这样相当于把原数组中要删除的数去除后，所有其他数字前移。


class Solution:
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        
        length = 0
        for i in range(len(nums)):            # 遍历所有数字
            if nums[i] != val:                # 不等于val则不删除
                nums[length] = nums[i]        # 不删除的数
                length += 1                   # 不删除的长度+1
        return length
