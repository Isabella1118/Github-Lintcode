Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4
Example 4:

Input: [1,3,5,6], 0
Output: 0


Thinking:二分法，中点如果大于target则在前半部分寻找，中点如果小于target则在后半部分寻找。


class Solution:
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if len(nums) == 0:
            return 0
        
        start = 0
        end = len(nums)-1
        
        while start + 1 < end:
            mid = (start + end) // 2
            if nums[mid] >= target:
                end = mid                          # should be in the first half
            else:
                start = mid                        # should be in the second half
        
        
        if nums[start] >= target:
            return start
        if nums[end] >= target:
            return end
        return len(nums)
