Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]

Thinking: 知道两个数组原先的长度，就可以知道合并后的长度，倒叙遍历两个数组，大的数优先放到合并后的数组对应下标处。
如果第一个数组先遍历完，那应该把第二个数组剩下的元素复制过来；如果第二个先遍历玩，就不用变化了，因为第一个数组剩余的元素已经在目标位置。
最后要判断m和n是不是仍然大于0, 但是m不需要了，因为我们本来就是要在nums1的基础上改，m如果还大于0的话我们不需要改nums1了，保留不变即可。n大于0则直接
用在n之前的数添上。

Solution:

class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        while m > 0 and n > 0:
            if nums1[m-1] > nums2[n-1]:         //判断最后一个数
                nums1[m+n-1] = nums1[m-1]       //添上大的数到最后位上
                m-=1                            //从后往前
            else:
                nums1[m+n-1] = nums2[n-1]
                n-=1
            
        if n > 0:                       //nums1遍历完了 nums2还没遍历完
            nums1[:n] = nums2[:n]       //直接添上
