Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4

Thinking: 将所有数字进行异或操作。对于异或操作明确以下三点：
1. 一个整数与自己异或的结果是0
2. 一个整数与0异或的结果是自己
3. 异或操作满足交换律，即a^b=b^a
所以对所有数字进行异或操作后剩下的就是那个只出现一次的数字。

Solution:

class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        res = nums[0]
        for i in nums[1:]:
            res ^= i
        return res
