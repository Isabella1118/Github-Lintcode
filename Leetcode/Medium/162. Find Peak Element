A peak element is an element that is greater than its neighbors.

Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that nums[-1] = nums[n] = -∞.

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 1 or 5 
Explanation: Your function can return either index number 1 where the peak element is 2, 
             or index number 5 where the peak element is 6.
             
Thinking: Binary Search

Solution:

class Solution(object):
    def findPeakElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        start = 1
        end = len(nums) - 2
        
        while start + 1 < end:
            mid = start + (end - start) / 2
            
            if nums[mid] < nums[mid - 1]:
                end = mid
            elif nums[mid] < nums[mid + 1]:
                start = mid
            else:
                end = mid
        
        if nums[start] < nums[end]:
            return end
        else:
            return start
        
        另外做法：
        """
        if len(nums)==0 or len(nums)==1:
            return 0
        left=0
        right=len(nums)-1
        while left+1<right:
            mid=left+(right-left)/2
            #只需要判断一边即可
            #不需要单独判断中点
            if nums[mid-1]<nums[mid]:
                left=mid
            else:
                right=mid
        if nums[left]>nums[right]:
            return left
        else:
            return right
        """
