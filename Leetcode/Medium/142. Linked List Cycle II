Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Thinking: 快慢指针。如果有环，fast两步，slow一步，slow最终能追上fast。如果有环，则head和slow重合的地方即为环开始的节点。

Solution: 

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return None
        slow=fast=head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
            #直接两head相等，不用.val??
            if fast==slow:
                while head!=slow:
                    head=head.next
                    slow=slow.next
                return head
        return None
