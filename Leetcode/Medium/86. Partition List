Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5

Thinking: 造俩linkedlist，一个小于target，一个大于target，最后把俩合起来就完事儿了。

Solution:

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def partition(self, head, x):
        """
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """
        res1 = temp1 = ListNode(0)
        res2 = temp2 = ListNode(0)
        while head:
            if head.val < x:
                res1.next = head
                res1 = res1.next
                head = head.next
            else:
                res2.next = head
                res2 = res2.next
                head = head.next
        res1.next = temp2.next
        res2.next = None
        return temp1.next
    
    """
        res1=ListNode(0) #注意：这里res1和res2要分开定义，因为是俩不同的列表的值为0的节点
        res2=ListNode(0)
        temp1=res1
        temp2=res2
        while head:  #存在头节点
            if head.val<x:  #小于给定值的放入第一个链表
                res1.next=head
                res1=res1.next
            else:    #大于等于给定值的放入第二个链表
                res2.next=head
                res2=res2.next
            head=head.next   #遍历原链表
        
        res2.next=None   #易错：第二个链表末尾结束
        res1.next=temp2.next  #第一个链表的结尾和第二个链表开头连接，合并成一个列表
        return temp1.next   #返回以第一个链表开头的最终结果链表
    """
