Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

Thinking: 先从第一个字符开始，只要碰到已经出现过的字符就必须从之前出现该字符的index开始重新往后看。
例如‘xyzxlkjh’，当看到第二个‘x’时我们就应该从y开始重新往后看了。
怎么判断字符已经出现过了呢？使用一个hashmap，将每一个已经阅读过的字符作为键，而它的值就是它在原字符串中的index。如果我们现在的字符不在hashmap里面,
就把它加进hashmap中去。因此，只要目前的这个字符在该hashmap中的值大于等于了这一轮字符串的首字符，就说明它已经出现过了，我们就将首字符的index加1，
即从后一位又重新开始读，然后比较目前的子串长度与之前的最大长度，取大者。

l(字母L) 代表目前最大子串的长度
start 是这一轮未重复子串首字母的index
maps 放置每一个字符的index，如果maps.get(s[i], -1)大于等于start的话，就说明字符重复了，此时就要重置 l(字母L) 和start的值了，

Solution:

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        l = 0
        start = 0
        n = len(s)
        maps = {}
        
        for i in range(n):
            start = max(start, maps.get(s[i], -1)+1)  #要是maps里找不到对应key的value的话会返回-1，所以要+1使它等于0
            l = max(l, i-start+1)
            maps[s[i]] = i
        return l
