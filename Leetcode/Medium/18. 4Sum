Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

Thinking: 用3sum的做法修改，固定两个数，活动剩下的两个数。

Solution：

class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        n = len(nums)
        result = []
        nums.sort()
        for i in range(n):
            for j in range(i+1, n):
                l = j+1
                r = n-1
                while l < r:
                    sum = nums[i] + nums[j] + nums[l] + nums[r]
                    if sum == target:
                        if [nums[i], nums[j], nums[l], nums[r]] not in result:
                            result.append([nums[i], nums[j], nums[l], nums[r]])
                        l+=1
                        r-=1
                    elif sum > target:
                        r-=1
                    else:
                        l+=1
        return result
