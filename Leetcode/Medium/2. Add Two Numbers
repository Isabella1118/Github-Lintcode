You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Thinking:

Solution:

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        flag = 0
        res = dummy = ListNode(0)
        while l1 and l2:
            add = l1.val + l2.val + flag
            if add >= 10:
                dummy.next = ListNode(add % 10)
                flag = 1
                dummy = dummy.next
                l1 = l1.next
                l2 = l2.next
            else:
                dummy.next = ListNode(add)
                flag = 0
                dummy = dummy.next
                l1 = l1.next
                l2 = l2.next
                
        l = l1 if l1 else l2
        while l:
            add = l.val + flag
            if add >= 10:
                dummy.next = ListNode(add % 10)
                flag = 1
                dummy = dummy.next
                l = l.next
            else:
                dummy.next = ListNode(add)
                flag = 0
                dummy = dummy.next
                l = l.next
        if flag == 1:
            dummy.next = ListNode(1)
        return res.next
